{
	"info": {
		"_postman_id": "92e4c8dd-023a-4fd8-8ef8-dbe135d3aaa3",
		"name": "spring Boot Tutorial: restful-web-api",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4321287"
	},
	"item": [
		{
			"name": "OPTION Sample",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sample API: allowed verbs\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.header(\"Allow\");",
							"    console.log(`Sample API: get allowed varbs -> [${pm.response.headers.get(\"Allow\")}]`)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "OPTIONS",
				"header": [],
				"url": {
					"raw": "{{URL}}/verbs",
					"host": [
						"{{URL}}"
					],
					"path": [
						"verbs"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Save Sample",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sample API: save one\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.have.header(\"Location\");",
							"    pm.expect(pm.response.text()).not.empty",
							"    ",
							"    var candidateId = pm.response.text();",
							"    pm.environment.set(\"CANDIDATE_ID\", candidateId);",
							"    console.log(`Sample API: save one with ID=${candidateId}`)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"example text\",\n    \"code\": 100,\n    \"datetime\": \"2020-10-10T01:00:00\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}",
					"host": [
						"{{URL}}"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Get Sample",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sample API: get one\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.expect(pm.response.text()).not.empty;",
							"    console.log(`Sample API: get one -> ${pm.response.text()}`)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/{{CANDIDATE_ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{CANDIDATE_ID}}"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "HEAD Sample",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sample API: check existence one\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    console.log(`Sample API: check existence -> ${pm.response.status}`)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "HEAD",
				"header": [],
				"url": {
					"raw": "{{URL}}/{{CANDIDATE_ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{CANDIDATE_ID}}"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Update Sample",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sample API: update one\", function () {",
							"    pm.response.to.have.status(204);",
							"    console.log(`Sample API: update one -> ${pm.response.status == \"No Content\"? \"Done\" : \"Failed\"}`)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"updated example text\",\n  \"code\": 101,\n  \"datetime\": \"2020-10-10T01:01:00\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/{{CANDIDATE_ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{CANDIDATE_ID}}"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Update Sample Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sample API: update one by invalid data\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"    pm.response.to.be.serverError;\r",
							"    console.log(`Sample API: update one by invalid data -> ${pm.response.text()}`)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"0\",\n    \"text\": \"updated example text\",\n    \"code\": 101,\n    \"datetime\": \"2020-10-10T01:01:00\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/{{CANDIDATE_ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{CANDIDATE_ID}}"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete Sample",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sample API: delete one\", function () {",
							"    pm.response.to.have.status(204);",
							"    console.log(`Sample API: delete one -> ${pm.response.status == \"No Content\" ? \"Done\" : \"Failed\"}`)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/{{CANDIDATE_ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{CANDIDATE_ID}}"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Save All Sample",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sample API: save all\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.expect(pm.response.text()).not.empty",
							"    ",
							"    var listOfId = JSON.parse(pm.response.text());",
							"    pm.environment.set(\"LIST_OF_CANDIDATE_ID\", listOfId.join(\",\"));",
							"    console.log(`Sample API: save all with IDs=${pm.response.json().length}`)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n  {\n    \"text\": \"example text 1\",\n    \"code\": 200,\n    \"datetime\": \"2020-10-10T01:00:00\"\n  },\n  {\n    \"text\": \"example text 2\",\n    \"code\": 201,\n    \"datetime\": \"2020-10-10T01:00:00\"\n  }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/v1/samples/saveAll",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"samples",
						"saveAll"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Get All Sample",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sample API: get all\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.expect(pm.response.text()).not.empty;",
							"    console.log(`Sample API: get all with lenght ${pm.response.json().length}`)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/findAll",
					"host": [
						"{{URL}}"
					],
					"path": [
						"findAll"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get All Sample By IDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sample API: get all\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.expect(pm.response.text()).not.empty;",
							"    console.log(`Sample API: get all with lenght ${pm.response.json().length}`)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/findAll/{{LIST_OF_CANDIDATE_ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"findAll",
						"{{LIST_OF_CANDIDATE_ID}}"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Delete All Sample By IDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sample API: delete one\", function () {",
							"    pm.response.to.have.status(204);",
							"    console.log(`Sample API: delete one -> ${pm.response.status == \"No Content\" ? \"Done\" : \"Failed\"}`)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/deleteAll/{{LIST_OF_CANDIDATE_ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"deleteAll",
						"{{LIST_OF_CANDIDATE_ID}}"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Truncate Sample",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sample API: truncate\", function () {",
							"    pm.response.to.have.status(204);",
							"    console.log(`Sample API: truncate -> ${pm.response.status == \"No Content\" ? \"Done\" : \"Failed\"}`)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/truncate",
					"host": [
						"{{URL}}"
					],
					"path": [
						"truncate"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}