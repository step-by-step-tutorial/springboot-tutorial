{
  "info": {
    "_postman_id": "92e4c8dd-023a-4fd8-8ef8-dbe135d3aaa3",
    "name": "spring Boot Tutorial: restful-web-api",
    "description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "4321287"
  },
  "item": [
    {
      "name": "API allowed verbs",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"It has Allow header\", function () {",
              "    pm.response.to.have.header(\"Allow\");",
              "});",
              "",
              "pm.test(\"print expectation\", function () {",
              "     console.log(`allowed HTTP methods: [${pm.response.headers.get(\"Allow\")}]`)",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "OPTIONS",
        "header": [],
        "url": {
          "raw": "{{URL}}/options",
          "host": [
            "{{URL}}"
          ],
          "path": [
            "options"
          ]
        },
        "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
      },
      "response": []
    },
    {
      "name": "Save",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"It has Location header\", function () {",
              "    pm.response.to.have.header(\"Location\");",
              "});",
              "",
              "pm.test(\"It returns ID in the body\", function () {",
              "    pm.expect(pm.response.text()).not.empty",
              "});",
              "",
              "pm.test(\"Set default ID for the test environment\", function () {",
              "    pm.environment.set(\"CANDIDATE_ID\", pm.response.text());",
              "});",
              "",
              "pm.test(\"print expectation\", function () {",
              "    console.log(`save one resource with ID: ${pm.response.text()}`)",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"text\": \"example text\",\n    \"code\": 100,\n    \"datetime\": \"2020-10-10T01:00:00\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{URL}}",
          "host": [
            "{{URL}}"
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "Find",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "    pm.response.to.be.ok;",
              "});",
              "",
              "pm.test(\"Body is not empty\", function () {",
              "    pm.expect(pm.response.text()).not.empty;",
              "});",
              "",
              "pm.test(\"print expectation\", function () {",
              "    console.log(`returned resource: ${pm.response.text()}`)",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{URL}}/{{CANDIDATE_ID}}",
          "host": [
            "{{URL}}"
          ],
          "path": [
            "{{CANDIDATE_ID}}"
          ]
        },
        "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
      },
      "response": []
    },
    {
      "name": "Find Not Found",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "    pm.response.to.be.notFound;",
              "});",
              "",
              "pm.test(\"Body is not empty\", function () {",
              "    pm.expect(pm.response.text()).empty;",
              "});",
              "",
              "pm.test(\"print expectation\", function () {",
              "    console.log(`returned resource: ${pm.response.text()}`)",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{URL}}/0",
          "host": [
            "{{URL}}"
          ],
          "path": [
            "0"
          ]
        },
        "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
      },
      "response": []
    },
    {
      "name": "Exists",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "    pm.response.to.be.ok;",
              "});",
              "",
              "pm.test(\"print expectation\", function () {",
              "    console.log(`check existence: ${pm.response.status}`)",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "HEAD",
        "header": [],
        "url": {
          "raw": "{{URL}}/{{CANDIDATE_ID}}",
          "host": [
            "{{URL}}"
          ],
          "path": [
            "{{CANDIDATE_ID}}"
          ]
        },
        "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
      },
      "response": []
    },
    {
      "name": "Exists Not Found",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "    pm.response.to.be.notFound;",
              "});",
              "",
              "pm.test(\"print expectation\", function () {",
              "    console.log(`check existence: ${pm.response.status}`)",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "HEAD",
        "header": [],
        "url": {
          "raw": "{{URL}}/0",
          "host": [
            "{{URL}}"
          ],
          "path": [
            "0"
          ]
        },
        "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
      },
      "response": []
    },
    {
      "name": "Update",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});",
              "",
              "pm.test(\"print expectation\", function () {",
              "    console.log(`update result: ${pm.response.status == \"No Content\"? \"Done\" : \"Failed\"}`)",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"text\": \"updated example text\",\n  \"code\": 101,\n  \"datetime\": \"2020-10-10T01:01:00\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{URL}}/{{CANDIDATE_ID}}",
          "host": [
            "{{URL}}"
          ],
          "path": [
            "{{CANDIDATE_ID}}"
          ]
        },
        "description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
      },
      "response": []
    },
    {
      "name": "Update Failed",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {\r",
              "    pm.response.to.have.status(400);\r",
              "    pm.response.to.be.badRequest;\r",
              "});\r",
              "\r",
              "pm.test(\"print expectation\", function () {\r",
              "    console.log(`update failed with message: ${pm.response.text()}`)\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"id\": \"0\",\n    \"text\": \"updated example text\",\n    \"code\": 101,\n    \"datetime\": \"2020-10-10T01:01:00\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{URL}}/{{CANDIDATE_ID}}",
          "host": [
            "{{URL}}"
          ],
          "path": [
            "{{CANDIDATE_ID}}"
          ]
        },
        "description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
      },
      "response": []
    },
    {
      "name": "Delete",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});",
              "",
              "pm.test(\"print expectation\", function () {",
              "    console.log(`delete result: ${pm.response.status == \"No Content\" ? \"Done\" : \"Failed\"}`)",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{URL}}/{{CANDIDATE_ID}}",
          "host": [
            "{{URL}}"
          ],
          "path": [
            "{{CANDIDATE_ID}}"
          ]
        },
        "description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
      },
      "response": []
    },
    {
      "name": "Save Batch",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"Body is not empty\", function () {",
              "     pm.expect(pm.response.text()).not.empty",
              "});",
              "",
              "pm.test(\"Set default list of ID for the test environment\", function () {",
              "    pm.environment.set(\"LIST_OF_CANDIDATE_ID\", JSON.parse(pm.response.text()).join(\",\"));",
              "});",
              "",
              "pm.test(\"print expectation\", function () {",
              "    console.log(`number of saved resources: ${pm.response.json().length}`)",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "[\n  {\n    \"text\": \"example text 1\",\n    \"code\": 200,\n    \"datetime\": \"2020-10-10T01:00:00\"\n  },\n  {\n    \"text\": \"example text 2\",\n    \"code\": 201,\n    \"datetime\": \"2020-10-10T01:00:00\"\n  }\n]",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{URL}}/batch",
          "host": [
            "{{URL}}"
          ],
          "path": [
            "batch"
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "Get All",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "    pm.response.to.be.ok;",
              "});",
              "",
              "pm.test(\"Body is not empty\", function () {",
              "    pm.expect(pm.response.text()).not.empty;",
              "});",
              "",
              "pm.test(\"print expectation\", function () {",
              "    console.log(`number of returned resources: ${pm.response.json().length}`)",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{URL}}",
          "host": [
            "{{URL}}"
          ]
        },
        "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
      },
      "response": []
    },
    {
      "name": "Delete Batch",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});",
              "",
              "pm.test(\"print expectation\", function () {",
              "    console.log(`delete result: ${pm.response.status == \"No Content\" ? \"Done\" : \"Failed\"}`)",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "[{{LIST_OF_CANDIDATE_ID}}]",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{URL}}/batch",
          "host": [
            "{{URL}}"
          ],
          "path": [
            "batch"
          ]
        },
        "description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
      },
      "response": []
    },
    {
      "name": "Delete All",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});",
              "",
              "pm.test(\"print expectation\", function () {",
              "    console.log(`truncate result: ${pm.response.status == \"No Content\" ? \"Done\" : \"Failed\"}`)",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{URL}}",
          "host": [
            "{{URL}}"
          ]
        },
        "description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "id",
      "value": "1"
    },
    {
      "key": "base_url",
      "value": "https://postman-rest-api-learner.glitch.me/"
    }
  ]
}