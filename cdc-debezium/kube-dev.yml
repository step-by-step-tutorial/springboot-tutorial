---
apiVersion: v1
kind: Namespace
metadata:
  name: dev
---
apiVersion: v1
kind: Secret
metadata:
  name: dev-credentials
  namespace: dev
type: Opaque
data:
  # value: database
  # value: root
  MYSQL_ROOT_PASSWORD: cm9vdA==
  # value: user
  MYSQL_USERNAME: dXNlcg==
  # value: password
  MYSQL_PASSWORD: cGFzc3dvcmQ=
  # application
  # value: user
  DATABASE_USERNAME: dXNlcg==
  # value: password
  DATABASE_PASSWORD: cGFzc3dvcmQ=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-config
  namespace: dev
data:
  # database
  MYSQL_DATABASE: "tutorial_db"
  initdb.sql: |-
    CREATE USER IF NOT EXISTS 'user' IDENTIFIED BY 'password';
    GRANT REPLICATION CLIENT, RELOAD, REPLICATION SLAVE ON *.* TO 'user'@'%';
    GRANT ALL ON `tutorial_db`.* TO 'user'@'%';
    FLUSH PRIVILEGES;
  # Zookeeper configs
  ALLOW_ANONYMOUS_LOGIN: "yes"
  # Kafka configs
  KAFKA_CFG_BROKER_ID: "1"
  KAFKA_CFG_ZOOKEEPER_CONNECT: "zookeeper-service:2181"
  KAFKA_CFG_LISTENERS: "LOCALHOST://:9092,CONTAINER://:9093"
  KAFKA_CFG_ADVERTISED_LISTENERS: "LOCALHOST://localhost:9092,CONTAINER://kafka-service:9093"
  KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "LOCALHOST:PLAINTEXT,CONTAINER:PLAINTEXT"
  KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "LOCALHOST"
  ALLOW_PLAINTEXT_LISTENER: "yes"
  # Kafdrop configs
  KAFKA_BROKERCONNECT: "kafka-service:9093"
  JVM_OPTS: "-Xms32M -Xmx64M"
  # Debezium configs
  GROUP_ID: "1"
  CONFIG_STORAGE_TOPIC: "debezium-config"
  OFFSET_STORAGE_TOPIC: "debezium-offset"
  STATUS_STORAGE_TOPIC: "debezium-status"
  BOOTSTRAP_SERVERS: "kafka-service:9093"
  # Debezium UI configs
  KAFKA_CONNECT_URIS: "http://debezium:8083"
  # Application configs
  APP_HOST: "0.0.0.0"
  APP_PORT: "8080"
  APP_PROFILES: "mysql,kafka,debezium"
  DATABASE_HOST: "mysql"
  DATABASE_PORT: "3306"
  DATABASE_NAME: "tutorial_db"
  KAFKA_TOPIC_NAME: "cdc.tutorial_db.example_table"
  KAFKA_GROUP_ID: "cdc.tutorial_db.main-group"
  KAFKA_URL: "kafka-service:9093"
  DEBEZIUM_URL: "http://debezium:8083"
  DEBEZIUM_REGISTER_PATH: "/connectors"
  DEBEZIUM_CONNECTORS_FILE: "debezium-connectors-kube.json"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: database-pvc
  namespace: dev
  labels:
    app: mysql
    tier: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: dev
  labels:
    app: mysql
    tier: database
spec:
  selector:
    matchLabels:
      app: mysql
      tier: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
        tier: database
    spec:
      containers:
        - image: mysql:8.0
          name: mysql
          imagePullPolicy: "IfNotPresent"
          envFrom:
            - configMapRef:
                name: dev-config
            - secretRef:
                name: dev-credentials
          ports:
            - name: mysql
              containerPort: 3306
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
            - name: database-initdb
              mountPath: /docker-entrypoint-initdb.d
            - name: config
              mountPath: /config
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: database-pvc
        - name: database-initdb
          configMap:
            name: dev-config
        - name: config
          configMap:
            name: dev-config
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: dev
  labels:
    app: mysql
    tier: database
spec:
  selector:
    app: mysql
    tier: database
  ports:
    - port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adminer
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: adminer
  template:
    metadata:
      labels:
        app: adminer
    spec:
      containers:
        - name: adminer
          image: adminer:latest
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: adminer
  namespace: dev
spec:
  selector:
    app: adminer
  ports:
    - protocol: TCP
      port: 8084
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: bitnami/zookeeper:3.9.0
          ports:
            - containerPort: 2181
          envFrom:
            - configMapRef:
                name: dev-config
          volumeMounts:
            - name: zookeeper-data
              mountPath: /bitnami
            - name: config
              mountPath: /config
      volumes:
        - name: zookeeper-data
          emptyDir: { }
        - name: config
          configMap:
            name: dev-config
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service
  namespace: dev
spec:
  selector:
    app: zookeeper
  ports:
    - port: 2181
      targetPort: 2181
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: bitnami/kafka:3.9.0
          ports:
            - containerPort: 9092
            - containerPort: 9093
          envFrom:
            - configMapRef:
                name: dev-config
          volumeMounts:
            - name: kafka-data
              mountPath: /bitnami
            - name: config
              mountPath: /config
      volumes:
        - name: kafka-data
          emptyDir: { }
        - name: config
          configMap:
            name: dev-config
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: dev
spec:
  selector:
    app: kafka
  ports:
    - name: localhost
      port: 9092
      targetPort: 9092
    - name: container
      port: 9093
      targetPort: 9093
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafdrop
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafdrop
  template:
    metadata:
      labels:
        app: kafdrop
    spec:
      containers:
        - name: kafdrop
          image: obsidiandynamics/kafdrop:latest
          ports:
            - containerPort: 9000
          envFrom:
            - configMapRef:
                name: dev-config
          volumeMounts:
            - name: config
              mountPath: /config
      volumes:
        - name: config
          configMap:
            name: dev-config
---
apiVersion: v1
kind: Service
metadata:
  name: kafdrop-service
  namespace: dev
spec:
  selector:
    app: kafdrop
  ports:
    - port: 9000
      targetPort: 9000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: debezium
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: debezium
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: debezium
    spec:
      containers:
        - name: debezium
          image: debezium/connect:3.0.0.Final
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 8083
          envFrom:
            - configMapRef:
                name: dev-config
          volumeMounts:
            - name: config
              mountPath: /config
      volumes:
        - name: config
          configMap:
            name: dev-config
---
apiVersion: v1
kind: Service
metadata:
  name: debezium
  namespace: dev
spec:
  selector:
    app: debezium
  ports:
    - port: 8083
      targetPort: 8083
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: debeziumui
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: debeziumui
  template:
    metadata:
      labels:
        app: debeziumui
    spec:
      containers:
        - name: debeziumui
          image: debezium/debezium-ui:latest
          ports:
            - containerPort: 8080
          envFrom:
            - configMapRef:
                name: dev-config
          volumeMounts:
            - name: config
              mountPath: /config
      volumes:
        - name: config
          configMap:
            name: dev-config
---
apiVersion: v1
kind: Service
metadata:
  name: debeziumui
  namespace: dev
spec:
  selector:
    app: debeziumui
  ports:
    - port: 8082
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: application
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: application
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: application
    spec:
      containers:
        - name: application
          image: samanalishiri/application:latest
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 8080
          envFrom:
            - configMapRef:
                name: dev-config
            - secretRef:
                name: dev-credentials
          volumeMounts:
            - name: config
              mountPath: /config
      volumes:
        - name: config
          configMap:
            name: dev-config

---
apiVersion: v1
kind: Service
metadata:
  name: application
  namespace: dev
spec:
  selector:
    app: application
  ports:
    - port: 8080
      targetPort: 8080
