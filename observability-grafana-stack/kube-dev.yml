---
apiVersion: v1
kind: Namespace
metadata:
  name: dev
---
apiVersion: v1
kind: Secret
metadata:
  name: dev-credentials
  namespace: dev
type: Opaque
data: { }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-config
  namespace: dev
data:
  GF_AUTH_ANONYMOUS_ENABLED: "true"
  GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
  GF_AUTH_DISABLE_LOGIN_FORM: "true"
  APP_HOST: "0.0.0.0"
  APP_PORT: "8080"
  APP_PROFILES: grafana
  TRACE_URL: "http://tempo:4318/v1/traces"
  METRICS_URL: "http://tempo:4318/v1/metrics"
  LOKI_URL: "http://loki:3100/loki/api/v1/push"
  tempo.yaml: |
    server:
      http_listen_port: 3200

    distributor:
      receivers:
        otlp:
          protocols:
            http:
              endpoint: 0.0.0.0:4318
            grpc:
              endpoint: 0.0.0.0:4317
        zipkin:
          endpoint: 0.0.0.0:9411

    storage:
      trace:
        backend: local
        local:
          path: /tmp/tempo/blocks
  prometheus.yml: |
    global:
      scrape_interval: 2s
      evaluation_interval: 2s

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: [ 'prometheus:9090' ]
      - job_name: 'observability-grafana-stack'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: [ 'application:8080' ]
      - job_name: 'tempo'
        static_configs:
          - targets: [ 'tempo:3200' ]
      - job_name: 'loki'
        static_configs:
          - targets: [ 'loki:3100' ]
  datasource.yml: |
    apiVersion: 1

    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        editable: false
        jsonData:
          httpMethod: POST
          exemplarTraceIdDestinations:
            - name: trace_id
              datasourceUid: tempo
      - name: Tempo
        type: tempo
        access: proxy
        orgId: 1
        url: http://tempo:3200
        basicAuth: false
        isDefault: true
        version: 1
        editable: false
        apiVersion: 1
        uid: tempo
        jsonData:
          httpMethod: GET
          tracesToLogs:
            datasourceUid: 'loki'
          nodeGraph:
            enabled: true
      - name: Loki
        type: loki
        uid: loki
        access: proxy
        orgId: 1
        url: http://loki:3100
        basicAuth: false
        isDefault: false
        version: 1
        editable: false
        apiVersion: 1
        jsonData:
          derivedFields:
            - datasourceUid: tempo
              matcherRegex: \[.+,(.+?),
              name: TraceID
              url: $${__value.raw}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
        - name: loki
          image: grafana/loki
          args:
            - -config.file=/etc/loki/local-config.yaml
          ports:
            - containerPort: 3100
---
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: dev
spec:
  selector:
    app: loki
  ports:
    - port: 3100
      targetPort: 3100
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tempo
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tempo
  template:
    metadata:
      labels:
        app: tempo
    spec:
      containers:
        - name: tempo
          image: grafana/tempo
          args:
            - -config.file=/etc/tempo.yaml
          ports:
            - containerPort: 3200
            - containerPort: 4317
            - containerPort: 4318
            - containerPort: 9411
          volumeMounts:
            - name: tempo-config-volume
              mountPath: /etc/tempo.yaml
              subPath: tempo.yaml
              readOnly: true
      volumes:
        - name: tempo-config-volume
          configMap:
            name: dev-config
---
apiVersion: v1
kind: Service
metadata:
  name: tempo
  namespace: dev
spec:
  selector:
    app: tempo
  ports:
    - name: tempo
      port: 3200
      targetPort: 3200
    - name: grpc
      port: 4317
      targetPort: 4317
    - name: http
      port: 4318
      targetPort: 4318
    - name: zipkin
      port: 9411
      targetPort: 9411
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:v2.46.0
          args:
            - --enable-feature=exemplar-storage
            - --config.file=/etc/prometheus/prometheus.yml
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/prometheus.yml
              subPath: prometheus.yml
              readOnly: true
      volumes:
        - name: prometheus-config-volume
          configMap:
            name: dev-config
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: dev
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pyroscope
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pyroscope
  template:
    metadata:
      labels:
        app: pyroscope
    spec:
      containers:
        - name: pyroscope
          image: grafana/pyroscope
          ports:
            - containerPort: 4040
---
apiVersion: v1
kind: Service
metadata:
  name: pyroscope
  namespace: dev
spec:
  selector:
    app: pyroscope
  ports:
    - port: 4040
      targetPort: 4040
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana
          envFrom:
            - configMapRef:
                name: dev-config
          ports:
            - containerPort: 3000
          volumeMounts:
            - name: grafana-datasource-volume
              mountPath: /etc/grafana/provisioning/datasources/datasource.yml
              subPath: datasource.yml
              readOnly: true
      volumes:
        - name: grafana-datasource-volume
          configMap:
            name: dev-config
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: dev
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: application
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: application
  template:
    metadata:
      labels:
        app: application
    spec:
      containers:
        - name: application
          image: samanalishiri/application:latest
          imagePullPolicy: "IfNotPresent"
          envFrom:
            - configMapRef:
                name: dev-config
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: application
  namespace: dev
spec:
  selector:
    app: application
  ports:
    - port: 8080
      targetPort: 8080
